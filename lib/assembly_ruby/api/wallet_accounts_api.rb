=begin
#Assembly API

#Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.

The version of the OpenAPI document: 2.0
Contact: support@assemblypayments.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'cgi'

module AssemblyRuby
  class WalletAccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Pay a Bill
    # Pay a bill by withdrawing funds from a **Wallet Account** to a specified bpay account.
    # @param id [String] Account ID
    # @param bill_payment_request_body [BillPaymentRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [SingleDisbursement]
    def bill_payment(id, bill_payment_request_body, opts = {})
      data, _status_code, _headers = bill_payment_with_http_info(id, bill_payment_request_body, opts)
      data
    end

    # Pay a Bill
    # Pay a bill by withdrawing funds from a **Wallet Account** to a specified bpay account.
    # @param id [String] Account ID
    # @param bill_payment_request_body [BillPaymentRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SingleDisbursement, Integer, Hash)>] SingleDisbursement data, response status code and response headers
    def bill_payment_with_http_info(id, bill_payment_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletAccountsApi.bill_payment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WalletAccountsApi.bill_payment"
      end
      # verify the required parameter 'bill_payment_request_body' is set
      if @api_client.config.client_side_validation && bill_payment_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'bill_payment_request_body' when calling WalletAccountsApi.bill_payment"
      end
      # resource path
      local_var_path = '/wallet_accounts/{id}/bill_payment'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bill_payment_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'SingleDisbursement'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'oAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"WalletAccountsApi.bill_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletAccountsApi#bill_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show Wallet Account
    # Show details of a specific **Wallet Account** using a given `:id.`
    # @param id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @return [WalletAccount]
    def show_wallet_account(id, opts = {})
      data, _status_code, _headers = show_wallet_account_with_http_info(id, opts)
      data
    end

    # Show Wallet Account
    # Show details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
    # @param id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletAccount, Integer, Hash)>] WalletAccount data, response status code and response headers
    def show_wallet_account_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletAccountsApi.show_wallet_account ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WalletAccountsApi.show_wallet_account"
      end
      # resource path
      local_var_path = '/wallet_accounts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WalletAccount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'oAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"WalletAccountsApi.show_wallet_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletAccountsApi#show_wallet_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show Wallet Account BPAY Details
    # Show BPAY details of a specific **Wallet Account** using a given `:id.`
    # @param id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @return [WalletAccountBpayDetails]
    def show_wallet_account_nbpay_details(id, opts = {})
      data, _status_code, _headers = show_wallet_account_nbpay_details_with_http_info(id, opts)
      data
    end

    # Show Wallet Account BPAY Details
    # Show BPAY details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
    # @param id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletAccountBpayDetails, Integer, Hash)>] WalletAccountBpayDetails data, response status code and response headers
    def show_wallet_account_nbpay_details_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletAccountsApi.show_wallet_account_nbpay_details ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WalletAccountsApi.show_wallet_account_nbpay_details"
      end
      # resource path
      local_var_path = '/wallet_accounts/{id}/bpay_details'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WalletAccountBpayDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'oAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"WalletAccountsApi.show_wallet_account_nbpay_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletAccountsApi#show_wallet_account_nbpay_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show Wallet Account NPP Details
    # Show NPP details of a specific **Wallet Account** using a given `:id.`
    # @param id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @return [WalletAccountNppDetails]
    def show_wallet_account_npp_details(id, opts = {})
      data, _status_code, _headers = show_wallet_account_npp_details_with_http_info(id, opts)
      data
    end

    # Show Wallet Account NPP Details
    # Show NPP details of a specific **Wallet Account** using a given &#x60;:id.&#x60;
    # @param id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletAccountNppDetails, Integer, Hash)>] WalletAccountNppDetails data, response status code and response headers
    def show_wallet_account_npp_details_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletAccountsApi.show_wallet_account_npp_details ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WalletAccountsApi.show_wallet_account_npp_details"
      end
      # resource path
      local_var_path = '/wallet_accounts/{id}/npp_details'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WalletAccountNppDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'oAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"WalletAccountsApi.show_wallet_account_npp_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletAccountsApi#show_wallet_account_npp_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show Wallet Account User
    # Show the **User** the **Wallet Account** is associated with using a given `:id`.
    # @param id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @return [SingleUser]
    def show_wallet_account_user(id, opts = {})
      data, _status_code, _headers = show_wallet_account_user_with_http_info(id, opts)
      data
    end

    # Show Wallet Account User
    # Show the **User** the **Wallet Account** is associated with using a given &#x60;:id&#x60;.
    # @param id [String] Account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SingleUser, Integer, Hash)>] SingleUser data, response status code and response headers
    def show_wallet_account_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletAccountsApi.show_wallet_account_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WalletAccountsApi.show_wallet_account_user"
      end
      # resource path
      local_var_path = '/wallet_accounts/{id}/users'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SingleUser'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'oAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"WalletAccountsApi.show_wallet_account_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletAccountsApi#show_wallet_account_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Withdraw Funds
    # Withdraw funds from a **Wallet Account** to a specified disbursement account.
    # @param id [String] Wallet account ID
    # @param withdraw_request_body [WithdrawRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [SingleDisbursement]
    def withdraw_funds(id, withdraw_request_body, opts = {})
      data, _status_code, _headers = withdraw_funds_with_http_info(id, withdraw_request_body, opts)
      data
    end

    # Withdraw Funds
    # Withdraw funds from a **Wallet Account** to a specified disbursement account.
    # @param id [String] Wallet account ID
    # @param withdraw_request_body [WithdrawRequestBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SingleDisbursement, Integer, Hash)>] SingleDisbursement data, response status code and response headers
    def withdraw_funds_with_http_info(id, withdraw_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletAccountsApi.withdraw_funds ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WalletAccountsApi.withdraw_funds"
      end
      # verify the required parameter 'withdraw_request_body' is set
      if @api_client.config.client_side_validation && withdraw_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'withdraw_request_body' when calling WalletAccountsApi.withdraw_funds"
      end
      # resource path
      local_var_path = '/wallet_accounts/{id}/withdraw'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(withdraw_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'SingleDisbursement'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'oAuth2ClientCredentials']

      new_options = opts.merge(
        :operation => :"WalletAccountsApi.withdraw_funds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletAccountsApi#withdraw_funds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
