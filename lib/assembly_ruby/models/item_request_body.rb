=begin
#Assembly API

#Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.

The version of the OpenAPI document: 2.0
Contact: support@assemblypayments.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'date'
require 'time'

module AssemblyRuby
  class ItemRequestBody
    # Unique ID that can be generated by the platform. Cannot contain ’.’ character. Contact Assembly support if you want item IDs to be generated automatically.
    attr_accessor :id

    # A name for the item
    attr_accessor :name

    # The cost in cents
    attr_accessor :amount

    # [ISO 4217 alpha-3](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) currency code. This is an optional field and if not provided, the item will be created with the default currency of the marketplace.
    attr_accessor :currency

    # Payment type: 2. Express
    attr_accessor :payment_type

    # Marketplace / Pltform buyer ID
    attr_accessor :buyer_id

    # Marketplace / Platform Seller ID
    attr_accessor :seller_id

    # A comma separated list of fee IDs to apply
    attr_accessor :fee_ids

    # A description of the item
    attr_accessor :description

    # Link for the buyer CTA (Call To Action)
    attr_accessor :buyer_url

    # Link for the seller CTA (Call To Action)
    attr_accessor :seller_url

    # Toggle to generate tax invoice once Item is complete
    attr_accessor :tax_invoice

    # When `custom_descriptors` are enabled, this is the information to appear on credit card and direct debit statements.
    attr_accessor :custom_descriptor

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'amount' => :'amount',
        :'currency' => :'currency',
        :'payment_type' => :'payment_type',
        :'buyer_id' => :'buyer_id',
        :'seller_id' => :'seller_id',
        :'fee_ids' => :'fee_ids',
        :'description' => :'description',
        :'buyer_url' => :'buyer_url',
        :'seller_url' => :'seller_url',
        :'tax_invoice' => :'tax_invoice',
        :'custom_descriptor' => :'custom_descriptor'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'amount' => :'Integer',
        :'currency' => :'String',
        :'payment_type' => :'Integer',
        :'buyer_id' => :'String',
        :'seller_id' => :'String',
        :'fee_ids' => :'String',
        :'description' => :'String',
        :'buyer_url' => :'String',
        :'seller_url' => :'String',
        :'tax_invoice' => :'Boolean',
        :'custom_descriptor' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `AssemblyRuby::ItemRequestBody` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `AssemblyRuby::ItemRequestBody`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = '7190770-1-2908'
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = 'Item 7190770-1-2908'
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'payment_type')
        self.payment_type = attributes[:'payment_type']
      end

      if attributes.key?(:'buyer_id')
        self.buyer_id = attributes[:'buyer_id']
      else
        self.buyer_id = 'buyer-719013950014'
      end

      if attributes.key?(:'seller_id')
        self.seller_id = attributes[:'seller_id']
      else
        self.seller_id = 'seller-71718579'
      end

      if attributes.key?(:'fee_ids')
        self.fee_ids = attributes[:'fee_ids']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'buyer_url')
        self.buyer_url = attributes[:'buyer_url']
      end

      if attributes.key?(:'seller_url')
        self.seller_url = attributes[:'seller_url']
      end

      if attributes.key?(:'tax_invoice')
        self.tax_invoice = attributes[:'tax_invoice']
      end

      if attributes.key?(:'custom_descriptor')
        self.custom_descriptor = attributes[:'custom_descriptor']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @payment_type.nil?
        invalid_properties.push('invalid value for "payment_type", payment_type cannot be nil.')
      end

      if @buyer_id.nil?
        invalid_properties.push('invalid value for "buyer_id", buyer_id cannot be nil.')
      end

      if @seller_id.nil?
        invalid_properties.push('invalid value for "seller_id", seller_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @name.nil?
      return false if @amount.nil?
      return false if @payment_type.nil?
      return false if @buyer_id.nil?
      return false if @seller_id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          amount == o.amount &&
          currency == o.currency &&
          payment_type == o.payment_type &&
          buyer_id == o.buyer_id &&
          seller_id == o.seller_id &&
          fee_ids == o.fee_ids &&
          description == o.description &&
          buyer_url == o.buyer_url &&
          seller_url == o.seller_url &&
          tax_invoice == o.tax_invoice &&
          custom_descriptor == o.custom_descriptor
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, amount, currency, payment_type, buyer_id, seller_id, fee_ids, description, buyer_url, seller_url, tax_invoice, custom_descriptor].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = AssemblyRuby.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
