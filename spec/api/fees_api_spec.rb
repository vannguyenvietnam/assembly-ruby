=begin
#Assembly API

#Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.

The version of the OpenAPI document: 2.0
Contact: support@assemblypayments.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for AssemblyRuby::FeesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'FeesApi' do
  before do
    # run before each test
    @api_instance = AssemblyRuby::FeesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FeesApi' do
    it 'should create an instance of FeesApi' do
      expect(@api_instance).to be_instance_of(AssemblyRuby::FeesApi)
    end
  end

  # unit tests for create_fee
  # Create fee
  # Create a **Fee** to be associated with an **Item**. **Fees** will add or subtract from the **Item** amount based on the **User**, payment type or Disbursement account type. **Fees** can be &#x60;Fixed&#x60; or &#x60;Percentage&#x60; based. **Fees** can be capped, have a maximum amount and/or a minimum amount. 
  # @param fee_request_body 
  # @param [Hash] opts the optional parameters
  # @return [SingleFee]
  describe 'create_fee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_fees
  # List Fees
  # Retrieve an ordered and paginated list of existing **Fees**.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of records to retrieve. Up to 200.
  # @option opts [Integer] :offset Number of records to offset. Required for pagination.
  # @return [Fees]
  describe 'list_fees test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for show_fee
  # Show Fee
  # Show details of a specific **Fee** using a given &#x60;:id&#x60;. If the &#x60;item_amount&#x60; is specified, the response also shows the &#x60;calculated_fee&#x60; based on a percentage of the &#x60;item_amount&#x60;. 
  # @param id Fee ID
  # @param item_amount The cost of the item in cents on which the calculated Fee is based
  # @param [Hash] opts the optional parameters
  # @return [SingleFee]
  describe 'show_fee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
