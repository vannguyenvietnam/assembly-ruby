=begin
#Assembly API

#Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.

The version of the OpenAPI document: 2.0
Contact: support@assemblypayments.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for AssemblyRuby::UsersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'UsersApi' do
  before do
    # run before each test
    @api_instance = AssemblyRuby::UsersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UsersApi' do
    it 'should create an instance of UsersApi' do
      expect(@api_instance).to be_instance_of(AssemblyRuby::UsersApi)
    end
  end

  # unit tests for create_user
  # Create User
  # Create a **User**. **Users** can be associated with **Items** either as a buyer or a seller. **Users** can’t be both the buyer and seller for the same **Item**. **Note**: Some parameters are required for user verification. See our guide on [Onboarding a Payout User/Seller](https://developer.assemblypayments.com/docs/onboarding-a-pay-out-user) for more information. 
  # @param user_request_body 
  # @param [Hash] opts the optional parameters
  # @return [SingleUser]
  describe 'create_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_user_b_pay_accounts
  # List User&#39;s BPay Accounts
  # List the **BPay Accounts** the **User** is associated with using a given &#x60;:id&#x60;.
  # @param id User ID
  # @param [Hash] opts the optional parameters
  # @return [ListBpayAccounts]
  describe 'list_user_b_pay_accounts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_user_items
  # List User Items
  # Retrieve an ordered and paginated list of existing **Items** the **User** is associated with using a given &#x60;:id&#x60;.
  # @param id User ID
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Number of records to offset. Required for pagination.
  # @option opts [Integer] :limit Number of records to retrieve. Up to 200.
  # @return [Items]
  describe 'list_user_items test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_users
  # List Users
  # Retrieve an ordered and paginated list of existing **Users**.
  # @param search A text value to be used for searching users
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of records to retrieve. Up to 200.
  # @option opts [Integer] :offset Number of records to offset. Required for pagination.
  # @return [Users]
  describe 'list_users test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_user_disbursement_account
  # Set User Disbursement Account
  # Set the **User’s Disbursement Account** using a given **User** &#x60;:id&#x60; and a **Bank Account** &#x60;:account_id&#x60;.
  # @param id User ID
  # @param bank_account_id_request_body 
  # @param [Hash] opts the optional parameters
  # @return [SingleUser]
  describe 'set_user_disbursement_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for show_user
  # Show User
  # Show details of a specific User using a given &#x60;:id&#x60;.
  # @param id User ID
  # @param [Hash] opts the optional parameters
  # @return [SingleUser]
  describe 'show_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for show_user_bank_account
  # Show User Bank Account
  # Shows the user’s active bank account using a given &#x60;:id&#x60;.
  # @param id User ID
  # @param [Hash] opts the optional parameters
  # @return [BankAccount]
  describe 'show_user_bank_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for show_user_card_account
  # Show User Card Account
  # Show the user’s active card account using a given &#x60;:id&#x60;.
  # @param id User ID
  # @param [Hash] opts the optional parameters
  # @return [CardAccount]
  describe 'show_user_card_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for show_user_wallet_accounts
  # Show User Wallet Account
  # Show the **User’s Wallet Account** using a given &#x60;:id&#x60;.
  # @param id User ID
  # @param [Hash] opts the optional parameters
  # @return [WalletAccount]
  describe 'show_user_wallet_accounts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_user
  # Update User
  # Update an existing **User’s** attributes using a given &#x60;:id&#x60;.
  # @param id Unique ID that can be generated by the platform. Cannot contain ’.’ character.
  # @param update_user_request_body 
  # @param [Hash] opts the optional parameters
  # @return [SingleUser]
  describe 'update_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for verify_user
  # Verify User (Prelive Only)
  # Sets a user’s verification state to &#x60;approved&#x60; on pre-live given the **User** &#x60;:id&#x60;. Ensure that a **User** has the required user verification information before using this call, otherwise the call will fail. **Note**: This API call will only work in our pre-live environment. The user verification workflow holds for all users in production. 
  # @param id User ID
  # @param [Hash] opts the optional parameters
  # @return [SingleUser]
  describe 'verify_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
