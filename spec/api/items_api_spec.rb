=begin
#Assembly API

#Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.

The version of the OpenAPI document: 2.0
Contact: support@assemblypayments.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'spec_helper'
require 'json'

# Unit tests for AssemblyRuby::ItemsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ItemsApi' do
  before do
    # run before each test
    @api_instance = AssemblyRuby::ItemsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ItemsApi' do
    it 'should create an instance of ItemsApi' do
      expect(@api_instance).to be_instance_of(AssemblyRuby::ItemsApi)
    end
  end

  # unit tests for create_item
  # Create Item
  # Create an **Item**. Items require two **Users**, a buyer and a seller. The &#x60;buyer_id&#x60; and &#x60;seller_id&#x60; are your unique user identifiers. 
  # @param item_request_body 
  # @param [Hash] opts the optional parameters
  # @return [SingleItem]
  describe 'create_item test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_item
  # Delete Item
  # Delete an existing **Item** using a given &#x60;:id&#x60;.
  # @param id Marketplace / Platform item ID
  # @param [Hash] opts the optional parameters
  # @return [SingleItem]
  describe 'delete_item test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_item_batch_transactions
  # List Item Batch Transactions
  # Retrieve an ordered and paginated list of **Batch Transactions** associated with the &#x60;Item&#x60; using a given &#x60;:id&#x60;. This will include both direct debits coming in, and the disbursements going out.
  # @param id Marketplace / Platform item ID
  # @param [Hash] opts the optional parameters
  # @return [ListBatchTransactions]
  describe 'list_item_batch_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_item_transactions
  # List Item Transactions
  # Retrieve an ordered and paginated list of **Transactions** associated with the **Item** using a given &#x60;:id&#x60;.
  # @param id Marketplace / Platform item ID
  # @param [Hash] opts the optional parameters
  # @return [Transactions]
  describe 'list_item_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_items
  # List Items
  # OK
  # @param search A text value to be used for searching within the item description
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Number of records to offset. Required for pagination.
  # @option opts [Integer] :limit Number of records to retrieve. Up to 200.
  # @option opts [String] :created_before Date and time in ISO 8601 format the item(s) were created before (e.g. 2020-02-27T23:54:59Z)
  # @option opts [String] :created_after Date and time in ISO 8601 format the item(s) were created after (e.g. 2020-02-27T23:54:59Z)
  # @return [Items]
  describe 'list_items test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for show_item
  # Show Item
  # Show details of a specific **Item** using a given &#x60;:id&#x60;.
  # @param id Marketplace / Platform item ID
  # @param [Hash] opts the optional parameters
  # @return [SingleItem]
  describe 'show_item test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for show_item_buyer
  # Show Item Buyer
  # Show the buyer **User** associated with the **Item** using a given &#x60;:id&#x60;.
  # @param id Marketplace / Platform item ID
  # @param [Hash] opts the optional parameters
  # @return [SingleUser]
  describe 'show_item_buyer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for show_item_fees
  # Show Item Fees
  # Show the **Fees** associated with the **Item** using a given &#x60;:id&#x60;.
  # @param id Marketplace / Platform item ID
  # @param [Hash] opts the optional parameters
  # @return [Fees]
  describe 'show_item_fees test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for show_item_seller
  # Show Item Seller
  # Show the seller **User** associated with the **Item** using a given &#x60;:id&#x60;.
  # @param id Marketplace / Platform item ID
  # @param [Hash] opts the optional parameters
  # @return [SingleUser]
  describe 'show_item_seller test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for show_item_status
  # Show Item Status
  # Show the status of an **Item** using a given &#x60;:id&#x60;.
  # @param id Marketplace / Platform item ID
  # @param [Hash] opts the optional parameters
  # @return [SingleStatus]
  describe 'show_item_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for show_item_wire_details
  # Show Item Wire Details
  # Show the **Item** wire payment details using a given &#x60;:id&#x60;.
  # @param id Marketplace / Platform item ID
  # @param [Hash] opts the optional parameters
  # @return [SingleWireDetailsWithId]
  describe 'show_item_wire_details test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_item
  # Update Item
  # Update an existing **Items** attributes using a given &#x60;:id&#x60;. Note: An item can only be updated if itâ€™s in &#x60;pending&#x60; state. Once an item has begun a payment process, you cannot update it. 
  # @param id Item ID
  # @param update_item_request_body 
  # @param [Hash] opts the optional parameters
  # @return [SingleItem]
  describe 'update_item test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
